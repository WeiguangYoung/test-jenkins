version: "3"

services:

  redis:
    # 构建镜像，镜像 redis:3.2
    image: redis:3.2
    # 网络
    networks:
      # 定义网络名称为backend
      - backend
    # 挂载
    volumes:
      # 将宿主机本地的redis/redis.conf映射到容器的/etc/redis.conf 且是只读文件
      - ./redis/redis.conf:/etc/redis.conf:ro
    # 端口号
    ports:
      # 将宿主机的6379端口号映射到容器端口号6379
      - "6379:6379"
    # 启动redis并指定配置文件路径在/etc/redis.conf
    command: ["redis-server", "/etc/redis.conf"]

  database:
    # 构建容器，容器名字为mysql5.7
    image: mysql:5.7
    # 网络
    networks:
      # 定义网络名字为backend
      - backend

    # 挂载
    volumes:
      # 宿主机将当前目录下/mysql/my.cnf 挂载到容器/etc/mysql/my.cnf 只读文件
      - ./mysql/my.cnf:/etc/mysql/my.cnf:ro
      # 宿主机将mysql-data名字 挂载到容器/var/lib/mysql
      - mysql-data:/var/lib/mysql

      #  设置环境变量
    environment:
      #  设置数据库初始密码
      MYSQL_ROOT_PASSWORD: 123456
    # 设置端口号
    ports:
      # 将宿主机的3306端口映射到容器3306端口号
      - "3306:3306"

  webapp:
    # 构建容器，通过当前目录下webapp目录下通过dockerfile构建容器
    build: ./webapp
    # 网络
    networks:
      # 定义网络名字为frontend
      - frontend
      # 定义网络名字为backend
      - backend
    # 挂载
    volumes:
      # 宿主机当前目录下webapp目录 挂载到容器/webapp
      - ./webapp:/webapp
    #定义容器启动顺序
    depends_on:
      # 先执行 redis
      - redis
      # 再执行 database
      - database

  nginx:
    # 镜像容器，容器名为nginx:1.12
    image: nginx:1.12
    # 网络
    networks:
      # 设置网络名字为fontend
      - frontend
    # 挂载
    volumes:
      # 将宿主机当前目录下nginx/nginx.conf 挂载到容器的/etc/nginx/nginx.conf 并且是只读文件
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./webapp/html:/webapp/html
    # 执行顺序
    depends_on:
      # 先执行webapp
      - webapp
    ports:
      - "80:80"
      - "443:443"

networks:
  frontend:
  backend:

volumes:
  mysql-data: